import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Put your name here
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html>
     * <head>
     * <title>the channel tag title as the page title</title>
     * </head>
     * <body>
     *  <h1>the page title inside a link to the <channel> link</h1>
     *  <p>the channel description</p>
     *  <table border="1">
     *   <tr>
     *    <th>Date</th>
     *    <th>Source</th>
     *    <th>News</th>
     *   </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";
        int titleIndx;
        int linkIndx;
        int desckIndx;
        String title = "";

        out.print("<html>\r\n"
            + "<head>\r\n"
            + "<title>");

            titleIndx = getChildElement(channel, "title");
            if ((titleIndx != -1)
            && (channel.child(titleIndx).numberOfChildren() > 0)) {
            out.print(channel.child(getChildElement(channel, "title")).child(0).label());
            title = channel.child(getChildElement(channel, "title")).child(0).label();
            } else {
                out.print("Empty Title");
            }

            out.print("</title>\r\n"
            + "</head>\r\n"
            + "<body>\r\n"
            + "<h1>");

            linkIndx = getChildElement(channel, "link");
            if ((linkIndx != -1)
            && (channel.child(linkIndx).numberOfChildren() > 0)) {
            out.print("<a href = \""
            + channel.child(getChildElement(channel, "link")).child(0).label() + "\">");
            } else {
                out.print("");
            }

            out.print(title + "</a></h1>\r\n"
            + "<p>");

            desckIndx = getChildElement(channel, "description");
            if ((desckIndx != -1)
            && (channel.child(desckIndx).numberOfChildren() > 0)) {
   out.print(channel.child(getChildElement(channel, "description")).child(0).label());
            } else {
                out.print("No description");
            }

            out.print("</p>\r\n"
            + "<table border=\"1\">\r\n"
            + "<tr>\r\n"
            + "<th>Date");
            out.print("</th>\r\n"
            + "<th>Source</th>\r\n"
            + "<th>News</th>\r\n"
            + "</tr>\r\n");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file.  These are the
     * expected elements generated by this method:
     *
     *  </table>
     * </body>
     * </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.print("\r\n</table>\r\n"
        + "</body>\r\n"
        + "</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int f = -1;
        int i = 0;

        while ((f == -1) && (i < xml.numberOfChildren())) {
            if (xml.child(i).label().equals(tag)) {
                if (xml.child(i).isTag()) {
                    f = i;
                }

            }
            i = i + 1;
        }
        return f;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires
     * [the label of the root of item is an <item> tag] and out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";
        int pubDateIndx = -1;
        int descriptionIndx = -1;
        int linkIndx = -1;
        int sourceIndx = -1;
        int titleIndx = -1;
        String source;
        String link;
        String description;

        if (item.label().equals("item")) {
            /*
             * Checks if node child exists. Then short-circuit if it has a text child.
             * Child(0) of the getChildElement is the text child. Getting it's label.
            */
            out.print("\r\n<tr>\r\n");
            pubDateIndx = getChildElement(item, "pubDate");
            if ((pubDateIndx != -1)
            && (item.child(pubDateIndx).numberOfChildren() > 0)) {
                out.print("<td>" + item.child(pubDateIndx).child(0).label()
                + "</td>\r\n");
            } else {
                out.print("<td>" + "No date available" + "</td>\r\n");
            }

            sourceIndx = getChildElement(item, "source");
            if (sourceIndx != -1) {
                if (item.child(sourceIndx).numberOfChildren() > 0
                && (item.child(sourceIndx).hasAttribute("url"))) {
                    source = item.child(sourceIndx).attributeValue("url");
                    out.print("<td><a href = \"" + source + "\">");
                    out.print(item.child(sourceIndx).child(0).label());
                    out.print("</a></td>\r\n");
                } else {
                out.print("<td>" + item.child(sourceIndx).child(0).label() + "</td>");
                }
            } else {
                out.print("<td>" + "No source available" + "</td>");
            }


            linkIndx = getChildElement(item, "link");
            if ((linkIndx != -1)
            && (item.child(linkIndx).numberOfChildren() > 0)) {
               link = ("<a href = \"" + item.child(linkIndx).child(0).label() + "\">");
            } else {
                link = "";
            }

            descriptionIndx = getChildElement(item, "description");
            if ((descriptionIndx != -1)
            && (item.child(descriptionIndx).numberOfChildren() > 0)) {
                description = item.child(descriptionIndx).child(0).label();
            } else {
                description = "No title available";
            }


            titleIndx = getChildElement(item, "title");
            if ((titleIndx != -1)
            && (item.child(titleIndx).numberOfChildren() > 0)) {
                out.print("<td>" + link
                + item.child(titleIndx).child(0).label() + "</a></td>\r\n</tr>");
            } else {
            out.print("<td>" + link + description + "</a></td>\r\n</tr>");
            }
        }

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();
        String rss;
        String file;
        boolean c = false;

        out.println("Enter RSS 2.0 feed URL.");
        rss = in.nextLine();
        XMLTree xml = new XMLTree1(rss);
        XMLTree channel = xml.child(0);

        if ((xml.label().equals("rss"))
            && (xml.hasAttribute("version"))
            && (xml.attributeValue("version").contentEquals("2.0"))) {
            c = true;
            }

        while (!c) {
            out.print("Requires RSS 2.0 feed. Input RSS 2.0 feed.");
            rss = in.nextLine();

            xml = new XMLTree1(rss);
            channel = xml.child(0);

            if ((xml.label().equals("rss"))
            && (xml.hasAttribute("version"))
            && (xml.attributeValue("version") == "2.0")) {
            c = true;
            }

        }

        out.println("Enter .html output file name");
        file = in.nextLine();
        SimpleWriter outFile = new SimpleWriter1L(file);
        outputHeader(channel, outFile);

        int item0 = getChildElement(channel, "item");
        int i = item0;
        while (i < channel.numberOfChildren()) {
            if (channel.child(i).label().equals("item")) {
                processItem(channel.child(i), outFile);
            }
            i = i + 1;
        }

        outputFooter(outFile);

        outFile.close();
        in.close();
        out.close();
    }

}